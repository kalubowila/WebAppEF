@*@model IEnumerable<WebAppEF.Model.Entity.Student>*@
@model PagedList.IPagedList<WebAppEF.Model.Entity.Student>
@using PagedList.Mvc;

<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
    ViewBag.Title = "Students";
}

<h2>Students</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>

@*
    The default BeginForm submits form data with a POST, which means that parameters are
    passed in the HTTP message body and not in the URL as query strings. When you specify
    HTTP GET, the form data is passed in the URL as query strings, which enables users
    to bookmark the URL. The W3C guidelines for the use of HTTP GET recommend that you should
    use GET when the action does not result in an update.
*@
@using (Html.BeginForm("Index", "Student", FormMethod.Get))
{
    <p>
        Find by Name: @Html.TextBox("searchString", ViewBag.CurrentFilter as string)
        <input type="submit" value="Search" />
    </p>
}

<table class="table">
    <tr>
        <th>
            @*@Html.DisplayNameFor(model => model.LastName)*@
            @Html.ActionLink(Html.DisplayNameFor(model => model.FirstOrDefault().LastName).ToHtmlString(), "Index", new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FirstOrDefault().FirstMidName)
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.EnrollmentDate)*@
            @Html.ActionLink(Html.DisplayNameFor(model => model.FirstOrDefault().EnrollmentDate).ToHtmlString(), "Index", new { sortOrder = ViewBag.DateSortParm })
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.LastName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.FirstMidName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.EnrollmentDate)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.ID }) |
                @Html.ActionLink("Details", "Details", new { id = item.ID }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.ID })
            </td>
        </tr>
    }

</table>

<br />
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index",
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
